[{"title":"windows命令行常用指令","url":"/2025/08/16/windows%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","content":""},{"title":"测试文章","url":"/2025/08/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","content":"一个测试文章\n"},{"title":"GitHub Pages + Hexo搭建个人博客网站","url":"/2025/08/14/GitHub%20Pages%20+%20Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/","content":"一 ，准备Github账号安装NodeJSgit可以选择安装。\n二、创建仓库在GitHub上创建一个新的代码仓库用于保存我们的网页。打开GitHub主页，点击New按钮，进入仓库创建页面。填写仓库名，格式必须为&lt;用户名&gt;.github.io，权限为Public。然后点击Create repository。\n测试网页点击creating a new file创建一个新文件，暂时作为我们网站的主页。\n\n新文件的名字必须为index.html，内容先随便写一个简单的，内容示例如下，填写之后点击Commit new file提交。\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;我的博客&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;个人主页&lt;/h1&gt;    &lt;h1&gt;Hello ~&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\nGitHub Pages中找到我们主页的地址为 https://xxxxxx.github.io/浏览器中访问，成功。\n三、安装Hexo我们采用Hexo来创建我们的博客网站，Hexo 是一个基于NodeJS的静态博客网站生成器，使用Hexo不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。点击进入 官网。\n安装 Hexo\nnpm install -g hexo-cli\n查看版本\nhexo -v\n创建一个项目 hexo-blog 并初始化\nhexo init hexo-blog\n转到hexo项目的文件夹\ncd hexo-blog\n下载\nnpm install\n本地启动\nhexo ghexo server\n浏览器访问 http://localhost:4000，页面默认主图风格如下\n六、创建文章如下修改 Hexo 博客目录中的 _config.yml，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。执行如下命令创建一篇新文章，名为《测试文章》\npost_asset_folder: true\n执行如下命令创建一篇新文章，名为《测试文章》\nhexo new post 测试文章\n\n执行完成后在source_posts目录下生成了一个md文件和一个同名的资源目录(用于存放图片\n四、 上传到github安装hexo-deployer-git\nnpm install hexo-deployer-git --save\n\n在根目录下的 _config.yml末尾添加，GitHub 相关信息\ndeploy:type: gitrepo: https://github.com/you_name/you_name.github.io.gitbranch: maintoken: ghp_3xxxxaPHexxxxxyMerofcFd9pblU2xxxSbsY\n\n其中 token 为 GitHub 的 Personal access tokens，获取方式可以参考这个链接：\n使用github搭建图床。\nhexo g -d\n\n\n五、更换主题&amp;美化这段可以后面再搞,建议按照顺序。\n1. 使用 NexT 主题安装主题\ncd hexo-bloggit clone https://github.com/iissnan/hexo-theme-next themes/next\n打开 _config.yml 文件，该文件为站点配置文件将主题修改为 next（在大约101行）\ntheme: next\n\n重新启动，查看新主题\n复制主题配置文件。以next主题为例打开node_modules\\hexo-theme-next目录\n\n复制  _config.yml文件为副本。重命名为 _config.next.yml剪切到根目录。\n2.个性化博客设置浏览器tab页名称修改根目录下 _config.yml 中的 title 字段。\n博客标题和图标主题配置文件 _config.nexy.yml中搜索favicon字段：可以修改博客的图标——.\\public\\images文件夹下。需要裁剪3232和1616的图片文件。\n添加社交网站主题配置文件 _config.nexy.yml中搜索social:\n虽然大部分是国外常用的社交软件，但是可以添加B站：\nBilibili: https://space.bilibili.com/1691508201|| fab fa-bilibili\n比如这样：\n添加浏览量在根目录下 _config.nexy.yml文件搜索busuanzi\n  enable改为: true\n\n之后会显示这个：\n添加评论区。使用LeanCloud等需要实名认证之类的操作，所以建议使用Github的app giscus。\n准备工作你的仓库必须是公开的 (public)，否则访客将无法查看 discussion        你的 GitHub 已安装 giscus app ，否则访客将无法评论和回应        在你的仓库中启用 Discussions 功能\n\n设置步骤\n注册 Giscus 并获取配置：\n访问 Giscus 的官方网站。\n\n\n\n\n\n\n根据你的需求配置 Giscus，然后复制生成的配置代码。\n\n     这是我的配置代码\n&lt;script src=&quot;https://giscus.app/client.js&quot;        data-repo=&quot;cwx2006/cwx2006.github.io&quot;        data-repo-id=&quot;R_kgxxPxxx0A&quot;        data-category=&quot;Q&amp;A&quot;        data-category-id=&quot;DIC_xxxxPXXXxM5xxxxX&quot;        data-mapping=&quot;title&quot;        data-strict=&quot;0&quot;        data-reactions-enabled=&quot;1&quot;        data-emit-metadata=&quot;0&quot;        data-input-position=&quot;top&quot;        data-theme=&quot;preferred_color_scheme&quot;        data-lang=&quot;zh-CN&quot;        data-loading=&quot;lazy&quot;        crossorigin=&quot;anonymous&quot;        async&gt;&lt;/script&gt;\n\n在你的 Hexo 博客目录中执行以下命令，安装 hexo-next-giscus 插件\nnpm install hexo-next-giscus --save\n\n编辑 Next 主题的配置文件：\n\n打开 Hexo 博客的根目录。\n编辑 _config.next.yml 文件（这是 Next 主题的配置文件）。\n\n\n添加 Giscus 配置：\n\n搜索 comments 。\n粘贴 Giscus 配置（在其他第三方评论插件的配置中），如下所示：\n\n\n\n# _config.next.ymlcomments:  giscus:  enable: true  repo: cwx2006/cwx2006.github.io   #需要修改  repo_id: R_kgxxPxxx0A             #修改  category: Announcements  category_id: DIC_kxDxPXXkxM5xxxxX #修改  mapping: title  strict: 0  reactions_enabled: 1  emit_metadata: 0  input_position: top  theme: preferred_color_scheme  lang: zh-CN  loading: lazy \n\n确保将 需要修改的内容替换为你实际的信息，可以使用vscode对照着看,有自动补全。\n5. 更新 Hexo 博客：   保存配置文件后，在博客根目录下执行以下命令来生成静态文件并部署：\n   hexo cleanhexo ghexo d\n\n参考：\nHexo 评论系统（Giscus）\n4.修改图片建议使用Typoar来写文章。在使用的过程中会遇到添加图片的问题\n建议图片放在文章资源文件夹中，使用相对路径引用图片。每次写新文章的时候，使用\nhexo new post 新文章标题\n创建资源文件夹。\n然后在page_name文件夹中放入图片，在page_name.md中就能直接使用相对路径比如![](image.jpg)引用图片资源了。只要 文章资源文件夹 和 文章.md 在同一目录下,Hexo生成的网页可以正常加载图像。\n但是这样的问题就是Typoar中无法预览图片。。。\n解决办法：安装插件——突然失效了\n使用github搭建图床。\n七、使用自己的域名解析如果有自己的域名的话，可以尝试一下\n建议使用example.com或者www.example.com\n1.DNS 配置中添加github.io 的记录选择CNAME\n填入WWW,CNAME填入xxx.github,io\n点击确认，等待DNS生效\n2.github设置在 github  仓库处进入设置 ”settings“。\n将页面拖至底部，找到 Github Pages 设置栏，将 Custom domain 设置为自己的域名 example.com ，设置成功\n\n出现绿色的提示已发布成功。\n可以ping一下自己的网站\n\n（github支持自定义域名的 HTTPS 请求，如需配置，可勾选下方的 Enforce HTTPS）会在根目录下生成一个 CNAME 文件，其内容为自己设置的域名，如下\n为了防止hexo d上传的时候都会覆盖掉github上的CNAME，导致域名失效。需要在&#x2F;source目录放置CNAME文件（可以下载或者先创建一个txt文件填入你的域名）\n最后，删掉txt后缀。因为是CNAME,不是CNAME.txt。\n八、参考资料基本撰写和格式语法 - GitHub 文档\ngethexon&#x2F;hexon: Let’s hexo online.\n不蒜子 - 极简网页计数器\n关于自定义域名和 GitHub 页面 - GitHub 文档\nTypora 的 Markdown 语法 - Typora Support\n这个看起来也不错：\n史上最全Typora教程—-程序员必学软件之一-CSDN博客\n"},{"title":"Windows系统自动粘贴文件","url":"/2025/08/15/Windows%E8%87%AA%E5%8A%A8%E7%B2%98%E8%B4%B4%E6%96%87%E4%BB%B6/","content":"在windows系统中，剪贴板中保存的是图片数据（类似图片的地址），而不是文件。\n使用这个小软件：\nPaste As File 把剪贴板的内容直接粘贴为文件\n下载，解压并运行，会在鼠标右键窗口栏处添加一个功能\n文档：\nHome &#x2F;PasteEx Wiki\nwin快捷操作PrtSc(在键盘右上角)&#x3D;win+shift+s &#x3D;选择区域截屏。win+PrtSc&#x3D;全屏截屏。\n"},{"title":"Hello World","url":"/2025/08/13/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"github搭建图床","url":"/2025/08/17/github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/","content":"建议：在测试添加图片的时候，开启加速器（比如 瓦特工具箱）\n配置GitHub和之前创建网站的仓库一样。新建仓库，，名字叫picture，权限为public。点开我们的头像，并选择”Settings“，然后点击左下角的”Developer settings“选项\n\n选择classic,创建token,有效期选择90天，GitHub官方强烈不推荐使用永久期限的token下方的勾选项选中repo开头的\n\n保存这个token的序号GitHub上的配置操作已完成。\n配置PicGo接下来，我们需要配置PicGo。PicGo是一个工具，从而将我们的图片上传到GitHub中。\n进入PicGo的官方网站PicGo is Here | PicGo，如下图所示。\n\n然后选择一个下载地址进行下载。\n这是GitHub的下载地址：Releases · Molunerfinn&#x2F;PicGo\n根据自己的系统选择安装包\n\n安装PicGo并打开\n我在”图床设置“中找到”GitHub“，并配置各项信息。\n\n仓库名部分修改为自己的仓库名称。\n分支名使用main。因为GitHub仓库的默认分支名称为main\n填入仓库的token。\n配置Typora如果需要在Typora软件中，复制剪切板的图片，或者上传本地的图片后，自动将图片上传至前面配置好的图床中，就需要配置一下Typora软件。\n在”文件“中选择”偏好设置…“，随后选择”图像“，并按照如下图所示的配置方式来加以设置。\n\n随后，选择上图中的”验证图片上传选项“，如果出现如下图所示的窗口，则表明我们已经成功配置完毕。\n截图&#x2F;复制图片后粘贴时要退出源码模式。有时候会出现图片加载不出来的情况。可以重新启动Typora看看。\n"},{"title":"Hyper-v命令行","url":"/2025/08/19/Hyper-v%E5%91%BD%E4%BB%A4%E8%A1%8C/","content":"   Hyper-v使用命令行是为了方便使用脚本管理。。。\n查看本地帮助\n选择 Windows 开始按钮，然后右键选择，点击 PowerShell。\n\n可以运行以下命令以显示 Hyper-V PowerShell 模块提供的 PowerShell 命令的可搜索列表。\n\n\nGet-Command -Module hyper-v | Out-GridView\n\n\n若要了解有关特定 PowerShell 命令的详细信息，请使用 Get-Help。 例如，运行以下命令将返回有关 Get-VM Hyper-V 命令的信息。\n需要加载一会\n\n查看现有的虚拟机Get-VM使用命令返回虚拟机列表\n\nPowerShell 中运行以下命令：\n\nGet-VM\n\n\n若要查看开机的虚拟机，可以使用命令添加 Where-Object 筛选器。\nGet-VM | where &#123;$_.State -eq &#x27;Running&#x27;&#125;\n\n查看关及状态的所有虚拟机\nGet-VM | where &#123;$_.State -eq &#x27;Off&#x27;&#125;\n\n启动和关闭虚拟机\n若要启动一台虚拟机，请使用虚拟机的名称运行以下命令：\nStart-VM -Name 虚拟机名字\n\n若要启动当前关闭的所有虚拟机，请获取这些计算机的列表，并将列表通过管道传递给 Start-VM 命令：\nGet-VM | where &#123;$_.State -eq &#x27;Off&#x27;&#125; | Start-VM\n\n若需要启动以debia 开头的虚拟机：\nStart-VM -Name debia*   \n\n\n关闭以debia 开头的虚拟机：\nStop-VM debia* \n\n强制关机\n Stop-VM -Name &#x27;虚拟机名&#x27; –Force\n\n若要关闭所有正在运行的虚拟机，请运行以下命令：\n\n\nGet-VM | where &#123;$_.State -eq &#x27;Running&#x27;&#125; | Stop-VM\n\n保存虚拟机\n\nSave-VM -Name &#x27;debian&#x27;\n\n\n\n保存以debia*开头的虚拟机Get-VM -Name debia* | Save-VM\n\n创建虚拟机检查点（快照）若要使用 PowerShell 创建检查点，使用命令选择虚拟机 Get-VM ，并将其传递给 Checkpoint-VM 命令。 最后，使用 -SnapshotName 为检查点命名。 完整的命令如下所示：\n创建虚拟机debian的名为Update1的检查点。\nCheckpoint-VM -Name &#x27;debian&#x27; -SnapshotName Update1\n查看检查点：\nGet-VMSnapshot -VMName &#x27;debian&#x27;\n如果要删除名称以“ Update”开头的所有快照，则应运行以下命令：\nGet-VM &#x27;debian&#x27; | Remove-VMSnapshot -Name Update*\n\n创建新的虚拟机以下示例演示如何在 PowerShell 集成脚本环境（ISE）中创建新的虚拟机。 这是一个简单的示例，可以将其扩展为包括其他 PowerShell 功能和更高级的 VM 部署。\n\n若要打开 PowerShell ISE 单击“开始”，请键入 PowerShell ISE。\n\n运行以下代码以创建虚拟机。 有关命令的详细信息，请参阅 New-VM 文档。\n$VMName = &quot;VMNAME&quot;   $VM = @&#123;    Name = $VMName    MemoryStartupBytes = 2147483648    Generation = 2    NewVHDPath = &quot;C:\\Virtual Machines\\$VMName\\$VMName.vhdx&quot;    NewVHDSizeBytes = 53687091200    BootDevice = &quot;VHD&quot;    Path = &quot;C:\\Virtual Machines\\$VMName&quot;    SwitchName = (Get-VMSwitch).Name&#125;   New-VM @VM\n\n查看虚拟机状态首先需要启用资源计量。\nEnable-VMResourceMetering -VMName &#x27;debian&#x27;\n查看名为debian的虚拟机的CPU使用率，RAM使用率，磁盘容量和网络流量\nMeasure-VM -VMName &#x27;debian&#x27;\n\n下方的还没有测试 \n\n虚拟机配置管理\n修改虚拟机配置\n# 修改虚拟机内存（动态内存）Set-VMMemory -VMName &quot;VMName&quot; -DynamicMemoryEnabled $true -MinimumBytes 512MB -MaximumBytes 4GB -StartupBytes 2GB# 修改虚拟机处理器数量Set-VMProcessor -VMName &quot;VMName&quot; -Count 4# 修改虚拟机启动顺序（仅适用于第2代虚拟机）Set-VMFirmware -VMName &quot;VMName&quot; -BootOrder @(&quot;HardDiskDrive&quot;, &quot;NetworkAdapter&quot;)\n\n添加或移除硬件\n# 添加虚拟硬盘Add-VMHardDiskDrive -VMName &quot;VMName&quot; -Path &quot;D:\\VHDs\\disk2.vhdx&quot;# 添加网络适配器Add-VMNetworkAdapter -VMName &quot;VMName&quot; -SwitchName &quot;External Switch&quot;# 移除硬件（例如移除第2个硬盘）Remove-VMHardDiskDrive -VMName &quot;VMName&quot; -ControllerLocation 1\n\n\n\n\n\n# 查看所有虚拟交换机\nGet-VMSwitch\n\n# 创建外部虚拟交换机\nNew-VMSwitch -Name &quot;External Switch&quot; -NetAdapterName &quot;Ethernet&quot; -AllowManagementOS $true\n\n# 创建内部或专用交换机\nNew-VMSwitch -Name &quot;Internal Switch&quot; -SwitchType Internal\n\n# 删除虚拟交换机\nRemove-VMSwitch -Name &quot;Internal Switch&quot; -Force\n------### 虚拟硬盘管理1. **创建和管理虚拟硬盘**\n# 创建新的动态扩展虚拟硬盘\nNew-VHD -Path &quot;C:\\VHDs\\new_disk.vhdx&quot; -SizeBytes 50GB -Dynamic\n\n# 挂载虚拟硬盘到主机（便于修改内容）\nMount-VHD -Path &quot;C:\\VHDs\\disk.vhdx&quot;\n\n# 卸载虚拟硬盘\nDismount-VHD -Path &quot;C:\\VHDs\\disk.vhdx&quot;\n\n# 压缩虚拟硬盘（回收未使用空间）\nOptimize-VHD -Path &quot;C:\\VHDs\\disk.vhdx&quot; -Mode Full\n\n\n\n------### 高级监控与性能1. **实时监控**   powershell\n查看虚拟机CPU、内存、磁盘、网络实时使用情况（持续刷新）   Get-VM -Name “VMName” | Get-VMResourceMetering | Format-List\n启用资源计量（如未启用）   Enable-VMResourceMetering -VMName “VMName”   2. **导出性能数据**   powershell\n导出虚拟机性能数据到CSV   Measure-VM -Name “VMName” | Export-Csv -Path “C:\\perf.csv” -NoTypeInformation   ------### 导入和导出虚拟机1. **导出虚拟机**   powershell   Export-VM -Name “VMName” -Path “D:\\Exports&quot;   2. **导入虚拟机**   powershell   Import-VM -Path “D:\\Exports\\VMName\\Virtual Machines\\VMID.xml” -Copy -GenerateNewId   ------### 虚拟机复制（Replication）1. **配置复制**   powershell\n启用虚拟机复制   Enable-VMReplication -VMName “VMName” -ReplicaServerName “ReplicaHost” -ReplicaServerPort 80 -AuthenticationType Kerberos -CompressionEnabled $true   2. **启动复制**   powershell   Start-VMInitialReplication -VMName “VMName”   ------### 安全检查点（快照）管理1. **还原到检查点**   powershell   Restore-VMSnapshot -Name “SnapshotName” -VMName “VMName” -Confirm:$false   2. **重命名检查点**   powershell   Rename-VMSnapshot -VMName “VMName” -Name “OldName” -NewName “NewName”   ------### 其他实用命令1. **查看Hyper-V主机信息**   powershell   Get-VMHost   2. **查看虚拟机集成服务状态**   powershell   Get-VMIntegrationService -VMName “VMName”   3. **启用或禁用集成服务**   powershell   Enable-VMIntegrationService -VMName “VMName” -Name “Time Synchronization”   Disable-VMIntegrationService -VMName “VMName” -Name “Time Synchronization”\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考链接\n[微软官网文档](https://learn.microsoft.com/zh-cn/powershell/module/hyper-v/?view=windowsserver2019-ps) 可以左上角根据自己的系统调整\n\n"},{"title":"linux系统安装redis","url":"/2025/08/23/linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85redis/","content":"使用 apt来安装 Redis：$ sudo apt update$ sudo apt install redis-server  -y或apt install redis-server -y\n安装完成后，Redis 将自动启动。您可以通过运行以下命令来检查 Redis 的状态：\nsudo systemctl status redis-server\n要测试 Redis 是否正常工作，您可以运行以下命令：\nredis-cli ping\n如果 Redis 工作正常，它将返回 PONG。\nRedis 配置打开 Redis的配置文件\nsudo nano /etc/redis/redis.conf\n将 bind 127.0.0.1 ::1 改为 bind 0.0.0.0，可以外部访问\n修改密码：找到ctrl+b搜索requirepass：找到：requirepass foobared将注释符号去掉，将后面修改成自己的密码，如:requirepass 123456之后重新启动 redis\nredis 服务控制#启动 redis 服务： sudo systemctl start redis#关闭 redis 服务： sudo systemctl stop redis#重启 redis 服务：sudo service redis restart\n\nredis 客户端连接在命令行中输入如下命令来登陆进 redis 客户端\nredis-cli\n使用密码连接redis \n./redis-cli -h 127.0.0.1 -p 6379 -a Passw0rd\n\n退出redis使用QUIT或者EXIT命令\nQUIT\nEXIT\n"},{"title":"使用Nginx和Rsync搭建镜像站","url":"/2025/08/23/%E8%87%AA%E5%BB%BA%E9%95%9C%E5%83%8F%E7%AB%99/","content":"tunasync搭建类似清华源镜像tunasync不知道为什么安装不了。文档：tunasync&#x2F;docs&#x2F;zh_CN&#x2F;get_started.md at master · tuna&#x2F;tunasync下载解压(tar -xvzf archive.tar.gz)，不用编译，按照文档 mkdir 创建文件夹  ，touch 创建文件，可以使用redis。\n运行脚本\n./tunasync manager --config /home/uesr/tuna/tunasync_demo/manager.conf./tunasync worker --config /home/user/tuna//tunasync_demo/worker.conf\n\n这个脚本疑似需要3个ssh窗口\ntunasync&#x2F;docs&#x2F;zh_CN&#x2F;workers.conf at master · tuna&#x2F;tunasync\n可以在这里选择要同步的内容\n参考\n搭建开源镜像站 - fangpsh’s blog\n(6 封私信) 使用tunasync部署企业内部开源软件镜像站 - 知乎\n使用tunasync搭建自己的开源软件镜像仓库 - 点滴记忆\n基于nginx搭建镜像站这个教程基于deepseek\n怎么使用nginx和rsync搭建一个可用的镜像源站(类似清华源)。只有局域网使用，可以同步ubuntu的东西，用户界面可以超级简陋(甚至只有文件目录），可以使用sh脚本。\n\n\n\n环境要求\nUbuntu服务器（18.04或更高版本）\n充足的磁盘空间（建议至少500GB）\n局域网环境\n\n安装步骤1. 安装必要的软件包bash\nsudo apt updatesudo apt install -y nginx rsync cron\n\n2. 创建镜像存储目录bash\nsudo mkdir -p /var/www/mirror/ubuntusudo chown -R www-data:www-data /var/www/mirrorsudo chmod -R 755 /var/www/mirror\n\n3. 配置Nginx创建Nginx配置文件 \nsudo nano /etc/nginx/sites-available/mirror\n添加以下内容：\nserver &#123;    listen 80;    server_name _;    root /var/www/mirror;    index index.html;    # 启用自动目录列表    autoindex on;    autoindex_exact_size off;    autoindex_localtime on;    location / &#123;        try_files $uri $uri/ =404;    &#125;    # 限制访问速度（可选）    # limit_rate 10m;&#125;\n\n启用站点并重新加载Nginx：\nsudo ln -s /etc/nginx/sites-available/mirror /etc/nginx/sites-enabled/sudo nginx -tsudo systemctl reload nginx\n\n4. 创建同步脚本创建同步脚本\nsudo nano /usr/local/bin/sync-mirror.sh\n\n添加以下内容\n#!/bin/bash# 镜像源设置（可以使用清华源或其他国内源）MIRROR_URL=&quot;rsync://mirrors.tuna.tsinghua.edu.cn/ubuntu/&quot;# 本地存储路径LOCAL_PATH=&quot;/var/www/mirror/ubuntu&quot;# 日志文件LOG_FILE=&quot;/var/log/ubuntu-sync.log&quot;# 同步选项RSYNC_OPTIONS=&quot;-avzH --delete --partial --progress --bwlimit=10000&quot;# 开始同步echo &quot;开始同步: $(date)&quot; &gt;&gt; $LOG_FILErsync $RSYNC_OPTIONS $MIRROR_URL $LOCAL_PATH &gt;&gt; $LOG_FILE 2&gt;&amp;1echo &quot;同步完成: $(date)&quot; &gt;&gt; $LOG_FILE# 更新权限chown -R www-data:www-data $LOCAL_PATHchmod -R 755 $LOCAL_PATH\n\n给脚本执行权限：\nsudo chmod +x /usr/local/bin/sync-ubuntu-mirror.sh\n\n5. 设置定时同步编辑cron任务：\nsudo crontab -e\n\n添加以下内容（每天凌晨3点同步）：\n0 3 * * * /usr/local/bin/sync-ubuntu-mirror.sh\n\n6. 首次同步手动执行首次同步（这将需要很长时间，取决于网络速度和源站负载）：\nbash\nsudo /usr/local/bin/sync-ubuntu-mirror.sh\n\n7. 创建简单用户界面(可选)可以创建基本HTML页面 /var/www/mirror/index.html：\n&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;局域网Ubuntu镜像站&lt;/title&gt;    &lt;style&gt;        body &#123; font-family: Arial, sans-serif; margin: 40px; &#125;        h1 &#123; color: #333; &#125;        a &#123; color: #007bff; text-decoration: none; &#125;        a:hover &#123; text-decoration: underline; &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;局域网Ubuntu镜像站&lt;/h1&gt;    &lt;p&gt;本镜像站最后更新时间: &lt;span id=&quot;last-update&quot;&gt;未知&lt;/span&gt;&lt;/p&gt;    &lt;p&gt;可用资源:&lt;/p&gt;    &lt;ul&gt;        &lt;li&gt;&lt;a href=&quot;/ubuntu&quot;&gt;Ubuntu 主仓库&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;        &lt;script&gt;        // 尝试从日志中获取最后更新日期        fetch(&#x27;/ubuntu-mirror-sync.log&#x27;)            .then(response =&gt; response.text())            .then(data =&gt; &#123;                const lines = data.split(&#x27;\\n&#x27;);                const lastUpdate = lines.filter(line =&gt; line.includes(&#x27;同步完成&#x27;));                if (lastUpdate.length &gt; 0) &#123;                    document.getElementById(&#x27;last-update&#x27;).textContent = lastUpdate[lastUpdate.length - 1];                &#125;            &#125;)            .catch(err =&gt; &#123;                console.log(&#x27;无法获取更新日志&#x27;);            &#125;);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n8. 客户端配置局域网内的其他Ubuntu机器可以使用此镜像站，编辑sources.list：\nsudo nano /etc/apt/sources.list\n\n替换为：\ndeb http://[你的服务器IP]/ubuntu/ focal main restricted universe multiversedeb http://[你的服务器IP]/ubuntu/ focal-updates main restricted universe multiversedeb http://[你的服务器IP]/ubuntu/ focal-backports main restricted universe multiversedeb http://[你的服务器IP]/ubuntu/ focal-security main restricted universe multiverse\n\n然后运行更新：\nsudo apt update\n\n管理维护\n监控同步状态：\ntail -f /var/log/ubuntu-mirror-sync.log\n\n手动触发同步：\nsudo /usr/local/bin/sync-ubuntu-mirror.sh\n\n检查磁盘使用情况：\ndf -h /var/www/mirrordu -sh /var/www/mirror/ubuntu\n\n同步脚本修改前提：找到同步源中国科学技术大学USTC Open Source Software Mirror中科大raync同步方法https://mirrors.ustc.edu.cn/help/rsync-guide.html\n\n\n查看一个镜像站可同步仓库列表\nrsync rsync.mirrors.ustc.edu.cn:: #有的高校镜像源的rsync协议的url不带rsync\n或者\nrsync mirrors.nju.edu.cn:: #例如南京大学\n查看资源目录结构(以ubuntu为例)\nrsync rsync://rsync.mirrors.ustc.edu.cn/ubuntu/\n修改同步脚本：例如，修改为同步南京大学镜像站的7-zip资源\n#!/bin/bash# 南京大学7-Zip镜像源设置MIRROR_URL=&quot;rsync://mirrors.nju.edu.cn/7-zip/&quot;LOCAL_PATH=&quot;/var/www/mirror/7-zip&quot;LOG_FILE=&quot;/var/log/7zip-mirror.log&quot;#镜像URL：改为南京大学7-Zip的rsync地址 rsync://mirrors.nju.edu.cn/7-zip/#本地路径：调整为 /var/www/mirror/7-zip 以明确存储内容#日志文件：更名为 /var/log/7zip-mirror.log# 同步选项（保留删除选项以确保镜像一致性）RSYNC_OPTIONS=&quot;-av --delete --bwlimit=10000&quot;# 创建本地目录（如果不存在）mkdir -p $LOCAL_PATH# 开始同步echo &quot;开始同步7-Zip镜像: $(date)&quot; &gt;&gt; $LOG_FILErsync $RSYNC_OPTIONS $MIRROR_URL $LOCAL_PATH &gt;&gt; $LOG_FILE 2&gt;&amp;1# 检查同步结果并记录if [ $? -eq 0 ]; then    echo &quot;同步成功完成: $(date)&quot; &gt;&gt; $LOG_FILE    # 更新时间戳    echo &quot;最后同步时间: $(date)&quot; &gt; $LOCAL_PATH/LAST_SYNC.txtelse    echo &quot;同步失败，退出代码: $? - $(date)&quot; &gt;&gt; $LOG_FILE    exit 1fi# 添加镜像站信息文件cat &gt; $LOCAL_PATH/MIRROR_INFO.txt &lt;&lt; EOF==================================================                Nanjing University                  www.nju.edu.cn                Open Source Mirror            http://mirror.nju.edu.cn            https://mirror.nju.edu.cn            rsync://mirror.nju.edu.cn--------------------------------------------------7-Zip 镜像同步时间: $(date)镜像路径: $LOCAL_PATH==================================================EOFecho &quot;同步完成，详细信息请查看: $LOG_FILE&quot;\n\n改进说明：\n增强了日志记录：添加了更详细的分隔符和同步信息\n添加了镜像信息文件：在本地镜像目录创建 MIRROR_INFO.txt 文件，包含镜像站的基本信息\n改进了错误处理：更详细地记录同步结果和可能的错误\n添加了完成提示：脚本执行完成后会在终端显示简要信息\n\n解决Nginx显示默认欢迎页面问题例如：\nWelcome to nginx!If you see this page, the nginx web server is successfully installed and working. Further configuration is required.For online documentation and support please refer to nginx.org.Commercial support is available at nginx.com.Thank you for using nginx.\n\n看到的Nginx欢迎页面表明仍在运行默认站点。\n1. 禁用默认站点# 使用以下命令禁用默认站点sudo unlink /etc/nginx/sites-enabled/default\n\n\n\n2. 确认您的镜像站点配置已启用# 检查您的镜像站点配置是否已链接到sites-enabled目录ls -l /etc/nginx/sites-enabled/# 如果不存在链接，创建它sudo ln -s /etc/nginx/sites-available/mirror /etc/nginx/sites-enabled/\n\n3. 检查Nginx配置语法sudo nginx -t\n\n如果配置正确，您应该看到：\nnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful\n\n4. 重新加载Nginx配置sudo systemctl reload nginx\n\n5. 验证镜像站点是否正常工作访问您的服务器IP地址，现在应该显示镜像目录列表而不是欢迎页面。\n下方未试过了\n\n如果问题仍然存在检查Nginx的主配置文件，确保它包含了sites-enabled目录：\nbash\nsudo nano /etc/nginx/nginx.conf\n\n确保有以下内容（通常在http块中）：\ntext\nhttp &#123;    ...    include /etc/nginx/sites-enabled/*;    ...&#125;\n\n检查防火墙设置确保防火墙允许HTTP流量：\n# 如果使用ufwsudo ufw allow &#x27;Nginx HTTP&#x27;sudo ufw status\n\napt-mirror同步ubuntu源安装apt-mirror\nsudo apt install apt-mirror\n编辑mirror.list配置文件\n############# config #################### set base_path    /var/spool/apt-mirror## set mirror_path  $base_path/mirror# set skel_path    $base_path/skel# set var_path     $base_path/var# set cleanscript $var_path/clean.sh# set defaultarch  &lt;running host architecture&gt;# set postmirror_script $var_path/postmirror.sh# set run_postmirror 0set nthreads     20set _tilde 0############## end config ############### 阿里云Ubuntu的APT源deb [arch=amd64] http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiversedeb [arch=amd64] http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiversedeb [arch=amd64] http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiversedeb [arch=amd64] http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiversedeb [arch=amd64] http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse# 下载完成后清除部分空间clean https://mirrors.aliyun.com/ubuntu\n\n运行sudo apt-mirror\n但是出现的问题是会显示出一个镜像源的网址的文件夹。\n这一部分参考文献\n使用apt-mirror搭建内网Ubuntu APT源同步阿里APT源 - 简书\n需要使用的命令:\n使用 mv 命令的 -t 选项移动多个文件夹。(将多个文件夹 a、b、c 和 d移动到目标目录 myfile 中)\nmv a b c d -t /myfile或者mv -t /myfile a b c d\ngithub项目同步比如obs等项目，需要下载发行文件到本地清华源使用的api:https://api.github.com/repos/\ndebian部分同步\n可以使用ftpsync同步特定架构的debian软件包：比如不需要mips,s390x架构的包。\n搭建debian源镜像服务器-CSDN博客\n[debian ftpsync sync debian-portriscv64] mirror\nDebian – 在 trixie 中的 ftpsync 软件包详细信息\n使用nginx搭建debian源镜像服务器_ftpsync debain-CSDN博客\nDebian – 建立一个 Debian 仓库的镜像\n"},{"title":"debian硬盘扩容","url":"/2025/08/26/debian%E7%A1%AC%E7%9B%98%E6%89%A9%E5%AE%B9/","content":"Hyper-V中，可以\n一、查看磁盘信息在Debian系统中，我们可以使用fdisk命令来查看磁盘信息。请按照以下步骤操作：\n\n打开终端。\n\n输入fdisk -l命令，查看所有磁盘的分区情况。\n\n\n\n该命令将列出系统中所有磁盘及其分区信息，包括磁盘名称、大小、分区类型等。\n二、初始化磁盘初始化磁盘通常包括创建分区和格式化分区两个步骤\n\n创建分区：\n\n\n使用fdisk命令进入磁盘分区界面：fdisk /dev/sdb（其中sdb为目标磁盘名称）。\n\n输入m可查看所有指令。\n\n根据提示进行分区操作，如输入n新增一个分区，输入分区号、分区大小完成分区。\n\n完成后使用w保存并退出。\n\n\n\n格式化分区：\n\n\n使用mkfs命令对新建分区进行格式化，例如：mkfs -t ext4 /dev/sdb1（其中sdb1为新创建的分区名称）。\n\n根据需要选择文件系统类型，如ext4、xfs等。\n\n三、挂载磁盘挂载磁盘是将磁盘分区与文件系统中的目录进行关联的过程。请按照以下步骤操作：\n\n创建一个用于挂载的目录，例如：mkdir /www。\n\n使用mount命令将分区挂载到指定目录：mount /dev/sdb1 /www。\n\n通过df -h命令确认挂载成功。\n\n\n四、设置开机自动挂载为了确保每次开机时磁盘都能自动挂载，我们需要将挂载信息添加到/etc/fstab文件中。\nnano使用方法：\n编辑完成后，使用 Ctrl + O 确认保存，然后 Enter 确认文件名，最后使用 Ctrl + X 退出nano编辑器。这样你的更改就会被保存，并且编辑器也会关闭。如果你在编辑过程中决定不保存更改并退出，可以直接按 Ctrl + X，编辑器会询问你是否保存更改，此时你可以选择不保存直接退出。\n\n在文件末尾添加一行类似于以下内容的挂载信息：/dev/sdb1 /www ext4 defaults 0 0。\n\n第一列为磁盘分区路径。\n第二列为挂载目录。\n第三列为文件系统类型。\n后两列分别表示dump备份标志和fsck检查顺序，一般设置为0即可。\n\n\n保存并关闭文件。\n\n重启系统后，磁盘将自动挂载到指定目录。\n\n\n五、扩展磁盘通过 df -h 输出当前磁盘分区大小 。\n文件系统        大小  已用  可用 已用% 挂载点udev            416M     0  416M    0% /devtmpfs            91M  1.1M   90M    2% /run/dev/sda1        78G   16G   59G   21% /tmpfs           452M   12K  452M    1% /dev/shmtmpfs           1.0M     0  1.0M    0% /run/credentials/systemd-journald.servicetmpfs           5.0M     0  5.0M    0% /run/lock/dev/sdb1      1007G  721G  241G   75% /mirrortmpfs           452M  8.0K  452M    1% /tmptmpfs            91M   72K   91M    1% /run/user/110tmpfs            91M   60K   91M    1% /run/user/1000\n\n通过 fdisk -l 输出所有的磁盘和磁盘分区的详细信息找到你需要扩展的硬盘，比如：输入sudo  fdisk /dev/sdb输入 p 查看磁盘分配\nDisk /dev/sda: 2 TiB, 2199023255552 bytes, 4294967296 sectorsDisk model: Virtual Disk    Units: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 4096 bytesI/O size (minimum/optimal): 4096 bytes / 4096 bytesDisklabel type: dosDisk identifier: 0xc4737dbbDevice     Boot Start        End    Sectors  Size Id Type/dev/sda1        2048 2147483647 2147481600 1024G 83 Linux\n\n要扩展分区，必须首先删除有关它的信息。为此，输入d并指定分区（1  &#x2F;dev&#x2F;sda1 or sda2）：\nCommand (m for help): dPartition number (1-2, default 2): 1Partition 1 has been deleted.\n\n创建新分区\nCommand (m for help): nPartition type   p   primary (0 primary, 0 extended, 4 free)   e   extended (container for logical partitions)Select (default p): pPartition number (1-4, default 1): 1First sector (2048-4294967295, default 2048): Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-4294967295, default 4294967295):  Created a new partition 1 of type &#x27;Linux&#x27; and of size 1023 GiB.\n\n系统会询问是否删除当前文件选择 N 不删除，然后输入 w  保存更改。\n# 此处不要选 y Do you want to remove the signature? [Y]es/[N]o: nCommand (m for help): wThe partition table has been altered.Syncing disks.\n\n调整 ext4 文件系统的大小\nsudo resize2fs /dev/sdb1\n如果成功，会出现类似以·下的内容：\nresize2fs 1.47.2 (1-Jan-2025)Filesystem at /dev/sdb1 is mounted on /mirror; on-line resizing requiredold_desc_blocks = 128, new_desc_blocks = 256The filesystem on /dev/sdb1 is now 536870656 (4k) blocks long.\n\n重启系统，此处也可以不操作，有条件建议重启一下。\nsudo reboot\n\n\n通过 df -h 可以验证磁盘已经扩展成功\n文件系统        大小  已用  可用 已用% 挂载点udev            416M     0  416M    0% /devtmpfs            91M  1.1M   90M    2% /run/dev/sda1        78G   16G   59G   21% /tmpfs           452M   12K  452M    1% /dev/shmtmpfs           1.0M     0  1.0M    0% /run/credentials/systemd-journald.servicetmpfs           5.0M     0  5.0M    0% /run/lock/dev/sdb1       2.0T  721G  1.2T   38% /mirrortmpfs           452M  8.0K  452M    1% /tmptmpfs            91M   76K   91M    1% /run/user/110tmpfs            91M   60K   91M    1% /run/user/1000\n\n修复磁盘以/dev/sdb为例\n卸载分区\numount /dev/sdb\n\n运行fsck 。\nsudo fsck /dev/sdb\n\n或者选择自动修复（当文件系统不止一个错误的时候）：\nsudo fsck -y /dev/sdb\n\n在所有文件系统上运行修复（没有root）：\nsudo fsck -AR -y \n\n参考\nDebian系统磁盘挂载 - 宏尘极客|笔记\n(6 封私信) debian如何扩大一个分区? - 知乎\nLinux 磁盘分区与挂载全指南：从磁盘识别到永久配置_linux 硬盘挂载-CSDN博客\n"},{"title":"服务器开关机","url":"/2025/08/26/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8/","content":"debian重启Shutdown命令你可以将时间字符串（通常是 &quot;now&quot; 或 &quot;hh:mm&quot; 格式）作为第一个参数指定。此外，你还可以附加一条广播消息（wall message），在系统关闭前通知所有已登录用户。\n重要提示： 如果使用了时间参数，系统会在关机前5分钟创建 /run/nologin 文件，这将阻止新用户登录，以便系统为关机做准备。\n以下是一些 shutdown 命令的示例：\nsudo shutdown # 安排关机sudo shutdown now #立即关机sudo shutdown 13:20 #下午1:20关机sudo shutdown -p now #立即关机并关闭电源sudo shutdown -H now #立即关机并停止系统（halt）sudo shutdown -r 09:35 #上午9:35重启sudo shutdown -r +5 #延迟重启（例如 5 分钟后）：\n\n要取消待处理的关机，只需输入以下命令：\nsudo shutdown -c\n\n关机选项概览：\n\n-r：关机后重启系统。\n-h：关机并由系统决定是暂停（halt）还是关闭电源（power off）。\n-H：仅暂停（halt）系统。\n-P：关闭系统电源（power off）。\n-c：取消已计划的关机操作。\n-k：只发送警告信息，不实际关机。\n\n纠正说明：一个常见错误是使用 shutdown -p，这是无效的。正确的关闭电源命令应为shutdown -P。\nReboot命令reboot命令指示系统重新启动。\nreboot  #重启系统（reboot）reboot --halt  #暂停系统（halt）reboot -p  #关闭系统电源（power off）\n\n使用 systemctl 命令systemctl 是现代 Linux 系统中管理服务的工具，也可用于关闭&#x2F;重启系统：\nsudo systemctl poweroff     # 关机sudo systemctl reboot       # 重启sudo systemctl halt         # 挂起\n\n\n\n"},{"title":"内网离线安装VisualStudio2022","url":"/2025/09/02/%E5%86%85%E7%BD%91%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85VisualStudio2022/","content":"(一)下载 Visual Studio 引导程序\n\n\n\n版本\n引导程序\n\n\n\nVisual Studio 2022 Enterprise\nvs_enterprise.exe\n\n\nVisual Studio 2022 Professional\nvs_professional.exe\n\n\nVisual Studio 2022 Community\nvs_community.exe\n\n\nVisual Studio 2022 生成工具\nvs_buildtools.exe\n\n\n一般选择 Community版本，下载后放到一个方便的地方。\n(二)创建本地缓存\n例如在D盘创建VSLayout文件夹\n在引导程序的目录下执行命令行\n.\\vs_Community.exe --layout D:\\VSLayout --lang zh-CN #这样子会下载所有的组件。#c语言课程需要的还没测试完毕\n\n然后会开始跳百分比。如果中间意外终止了也不用担心，重新执行会校验后继续\n（三）共享文件&#x2F;拷贝文件\n右键选择VSLayout文件夹的图标，\n属性–&gt;共享–&gt;共享。\n复制网络路径，或者使用IP地址。\n\\\\DESKTOP-BRQH0D4\\VSLayout\n\n也可以拷贝到移动硬盘之类的介质中。\n（四）离线安装\n在我的电脑上方地址栏输入复制的网络路径\n在要离线安装vs的电脑上面执行\n\\\\DESKTOP-BRQH0D4\\VSLayout\\vs_Community.exe  --noweb\n\n在弹出来的窗口选择想要安装的组件。\n一篇挺好的博客：\nVisual Studio2022离线安装(没网)，制作离线安装包\n微软官网不说人话：\n创建基于网络的安装 - Visual Studio (Windows) | Microsoft Learn\n将布局部署到客户端计算机 - Visual Studio (Windows) | Microsoft Learn\n更新基于网络的安装 - Visual Studio (Windows) | Microsoft Learn\n"},{"title":"debian架构","url":"/2025/09/18/debian%E6%9E%B6%E6%9E%84/","content":"这些是当今最常用、支持最完善的架构：\n\namd64 (也叫 x86_64)\n状态: 绝对的主流\n简介：这是当前最主流的桌面和服务器架构。由AMD设计，是对Intel的32位x86架构的64位扩展。\n特点：兼容32位(i386)应用，性能强大，软件生态极其丰富。\n应用场景：几乎所有现代笔记本电脑、台式机、服务器和云虚拟机。\n\n\ni386 (也叫 x86, 386)\n状态: 常见，但已过时\n简介：经典的32位Intel x86架构。它是PC时代初期的霸主，也是amd64的基础。\n特点：现已逐渐被淘汰，但许多32位应用程序仍需要在此架构上运行。\n应用场景：较老的电脑、嵌入式设备，以及为了兼容性而运行32位软件的环境。\n\n\narm64 (也叫 aarch64)\n状态: 极其重要，是现在和未来的主流之一\n\n特点：功耗低、性能优秀，是移动和嵌入式领域的绝对王者。\n\n应用场景：\n\n几乎所有智能手机和平板电脑（苹果A系列芯片、高通骁龙、联发科等）。\n苹果Mac电脑（Apple Silicon, 如 M1, M2, M3芯片）。\n树莓派4B (8GB型号)、树莓派400、树莓派5等高性能单板计算机。\n云服务器（AWS Graviton、Ampere Altra等ARM实例）。\n各种物联网设备。\n\n\narmhf (也叫 armv7+)\n\n状态: 常见，但正被 arm64 取代\n\n描述: 32位ARM架构，带硬件浮点支持。用于树莓派2&#x2F;3、许多旧款手机、嵌入式设备等。\n\n\n\n\n\n❄️ 冷门、已淘汰或小众架构 (基本不会用到)\n\n\n架构\n状态\n描述\n\n\n\nalpha\n已淘汰\n由DEC公司开发的高性能64位RISC架构，在其时代（90年代）性能非常领先，是高性能计算领域的选择，已于20世纪末至21世纪初被淘汰。****\n\n\nhppa\n**已淘汰\n惠普（HP）自家专有的RISC架构，用于其高中端服务器和工作站。 后来被HP和Intel合作开发的 ia64 (Itanium) 所取代，而Itanium本身也失败了。\n\n\nia64 (Itanium)\n已淘汰&#x2F;濒临淘汰\nIntel Itanium (安腾)架构，被誉为失败的技术典范之一。Intel和HP合作开发的64位架构（并非 i386 的64位扩展）。设计用于高端服务器，但因复杂性和x86-64的崛起而失败。Debian 12 已停止支持。\n\n\nm68k\n已淘汰\nMotorola 680x0 系列。用于苹果Macintosh（在PowerPC之前）、 Commodore Amiga、 Atari ST、 早期的Sun工作站，以及许多早期的嵌入式设备。现在只有怀旧爱好者或特定嵌入式系统使用。\n\n\nmips, mipsel\n小众&#x2F;嵌入式\nMIPS架构一种经典的RISC架构。mips 是大端序（Big-Endian），mipsel 是小端序（Little-Endian）。曾用于SGI工作站、一些路由器和嵌入式设备。影响力已大不如前，主要存在于特定市场（如家庭路由器）。龙芯CPU早期就是MIPS架构\n\n\npowerpc(PPC)\n小众\n由IBM、摩托罗拉（现为NXP）等公司开发的RISC架构。曾与x86分庭抗礼。曾用于苹果Mac（PowerPC G3, G4, G5、IBM服务器和工作站），任天堂GameCube、Wii，索尼PS3等游戏机。仍存在于一些高性能计算和嵌入式系统（如AmigaOne）中，但已非主流。\n\n\ns390 / s390x\n企业级&#x2F;特定领域\nIBM的大型机（Mainframe） 架构。s390 是32位，s390x（64位）。主要用于银行、金融等关键业务的大型服务器。非常专业和小众，但极其重要。，但离普通用户非常遥远**。\n\n\nsparc\n濒临淘汰&#x2F;小众\n由Sun Microsystems（现为Oracle）设计的RISC架构，以其在大型UNIX服务器中的强大性能而闻名。市场份额已急剧萎缩。是一个非常专业化、小众的领域。\n\n\narmel\n已被取代\n旧的ARM架构（ARMv4&#x2F;v5），带软件浮点支持。主要用于早期或性能极低的ARM设备，现已基本被 armhf 和 arm64 取代。\n\n\n"},{"title":"使用密钥登录linux","url":"/2025/09/08/%E4%BD%BF%E7%94%A8%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95linux/","content":"1.生成密钥两种方法生成密钥）0.服务器安装文件上传下载程序sudo apt install lrzsz\n\n1命令行生成首先，在本地机器上生成一个 ed25519 类型的 SSH 密钥对。在终端（Win上的PowerShell、CMD或WSL，Mac上的Terminal）执行以下命令：\n#切换到密钥目录,例如cd /root/.ssh#生成密钥ssh-keygen -t ed25519 -C &quot;your_email&quot;\n\n\n-t ed25519 指定生成 ed25519 密钥。\n-C 用于添加一个注释，通常使用电子邮件或用户名。\n\n系统会提示你选择密钥存储的位置&amp;私钥密码：\nroot@debian01:~/.ssh# ssh-keygen -t ed25519 -C &quot;your_email&quot;Generating public/private ed25519 key pair.Enter file in which to save the key (/root/.ssh/id_ed25519): Enter passphrase for &quot;/root/.ssh/id_ed25519&quot; (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_ed25519Your public key has been saved in /root/.ssh/id_ed25519.pubThe key fingerprint is:SHA256:KXcPqFtcsujafMwgSD2rCmL5jgR6gsZfQ3bc0yZ+Xl0 your_email@example.comThe key&#x27;s randomart image is:+--[ED25519 256]--+|                 ||                 ||   .             ||  . o . .o.      ||.. . =.oS++o    E||= o = o*.=+o  . .||**.. +o++. ... . ||*o= .+.o+ o .    ||.o.+..=.   .     |+----[SHA256]-----+\n\n你可以直接按回车选择默认位置，也可以指定一个不同的文件名。接着会要求输入一个密码来保护私钥（可以选择为空）。\n将公钥复制到目标服务器的 ~/.ssh/authorized_keys 文件中\nrz -y #上传公钥cat  id_ed25519.pub &gt;&gt;authorized_keys #导入公钥\n\n检查一下\ncat authorized_keys\n\n授权\nchmod 600 authorized_keyschmod 700 ~/.ssh\n\n\n\n导入私钥工具-》用户密钥管理者\n\n选择你的私钥，输入密码\n\n注意检查这里账户·是否正确\n\n如果使用其他用户名会出现问题\n\n2.本地生成打开Xshell，在菜单栏点击“工具”，在弹出的菜单中选择“(新建用户密钥生成向导)”。\n弹出“新建用户秘钥生成向导”对话框，在“秘钥类型”项选择“RSA”公钥加密算法，“秘钥长度”选择任意密钥长度，长度越长，安全性越高，如下图：\n\n点击“下一步”，等待密钥生成\n\n继续下一步，在“秘钥名称”中输入Key的文件名称，我这里为“id_rsa_2048”；在“加密密码”处输入一个密码用于加密私钥，并再次输入密码确认，如下图：\n\n点击“下一步”，密钥生成完毕（Public key Format选择SSH2-OpenSSH格式），这里显示的是公钥，我们可以复制公钥然后再保存，也可以直接保存公钥为文件。\n\n当然，稍后在属性中也可以保存公钥\n\n公钥保存完后，接下来为私钥文件。点击“导出”，导出为私钥文件——用来打开刚才的公钥。请妥善保管。\n\n注意：公钥有.pub后缀，私钥没有。\n上传公钥\nrz -y\n\n在弹出的窗口中选择要上传的公钥\n将公钥复制到目标服务器的 ~/.ssh/authorized_keys 文件中\ncat  id_ed25519.pub &gt;&gt;authorized_keys\n\n检查一下\ncat authorized_keys\n\n授权\nchmod 600 authorized_keys\n\n修改ssh设置修改/etc/ssh/sshd_config 配置文件\n\n确保以下行未被注释掉，并设置为 yes：\n\nPubkeyAuthentication yes # yes表示允许密钥登陆AuthorizedKeysFile      /root/.ssh/authorized_keys .ssh/authorized_keys2 # 可以指定密钥的文件位置，默认值会自动搜索。\n\n\n保存文件并退出编辑器（在 nano 中按 CTRL + X，然后按 Y 保存更改）。\n\n重新启动 SSH 服务修改配置文件后，需要重新启动 SSH 服务以使更改生效：\nsudo systemctl restart ssh\n最后可以尝试关闭SSH 密码登录&#x2F;修改登录端口\n找到#Port 22\n取消注释并修改端口号。\n打开 &#x2F;etc&#x2F;ssh&#x2F;sshd_config 配置文件,查找以下两行并修改或确保它们如下所示：\nPasswordAuthentication no # 不允许使用密码登陆。切记：只能在测试密钥登录成功后再改为 no！ChallengeResponseAuthentication no`\n\n禁用密码认证和挑战响应认证。重新启动 SSH 服务     \n如果你想其他的账户也使用密钥登录\nsu ***切换到那个账户\ncd ~\\\\.ssh\n然后就可以和root账户一样\n但是最后还是要使用root权限重启ssh\n"},{"title":"虚拟机添加外挂硬盘的操作步骤","url":"/2025/09/25/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%B7%BB%E5%8A%A0%E5%A4%96%E6%8C%82%E7%A1%AC%E7%9B%98%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4/","content":"vim可以用nano代替。\n虚拟机添加外挂硬盘的操作步骤使用外挂虚拟硬盘的好处，可以把代码数据单独存放在外挂的虚拟硬盘中，与虚拟机本身分离，万一虚拟机因为误操作搞挂了，不至于数据也丢失，也方便数据的搬运、分享等。\n本虚拟机，把外挂的数据盘移除，直接分享虚拟机本身给大家，而独立的数据盘，在需要的时候可以整体拷贝以作备份。\n以下是为虚拟机添加外挂虚拟硬盘的操作步骤，如有不明白的地方，请参考网上更详细的操作文档。\n1.创建虚拟硬盘虚拟机关机状态，为虚拟机新增一个SCSI的60G硬盘，这一步网上有非常详细的操作说明。【注意：随着OpenHarmony系统的演进，系统代码所占的空间已经非常大，建议新增的虚拟硬盘大于200G，这里仍以60G为例进行操作演示。】\n2.查询虚拟硬盘虚拟机开机后，进入命令行终端执行\nsudo fdisk -l\n\n应会有显示：\nDevice     Boot   Start      End  Sectors  Size Id Type/dev/sda1  *       2048  1050623  1048576  512M  b W95 FAT32/dev/sda2       1052670 62912511 61859842 29.5G  5 Extended/dev/sda5       1052672 62912511 61859840 29.5G 83 Linux\n\n这个sda是30G的系统盘，安装Ubuntu系统。\n然后会有如下信息：\nDisk /dev/sdc: 60 GiB, 64424509440 bytes, 125829120 sectorsDisk model: VMware Virtual SUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes\n\n这是第一步创建和添加的60G虚拟硬盘，注意这里显示的是 &#x2F;dev&#x2F;sdc，在你实际使用中可能是**&#x2F;dev&#x2F;sdX**，后面的步骤中，需要根据你的实际情况进行修改。\n3.创建硬盘分区命令行下执行：\nsudo fdisk /dev/sdc\n\n  输入m，显示帮助信息  再输入 n，添加一个新的分区  再输入 p，添加主分区  在分区表设置数字，都按默认值，把整个虚拟磁盘当做一个分区即可。  再输入 p，打印分区表，确认无误后，  再输入 w，保存分区表  再执行 \t$sudo fdisk -l  即可看到分区信息：\n  Device     Boot Start       End   Sectors Size Id Type/dev/sdc1        2048 125829119 125827072  60G 83 Linux\n\n4.格式化硬盘分区执行如下命令：\nsudo mkfs -t ext4 /dev/sdc1\n\n将新建分区格式化成ext4格式\n5.自动挂载虚拟硬盘执行如下命令：\n$sudo vim /etc/fstab\n\n编辑该文件，增加\n/dev/sdc1      /home/ohos/Disk60G   ext4  defaults   0   1\n\n重启后新的虚拟硬盘就可以自动挂载到Disk60G目录下。\n6.修改磁盘权限执行如下命令：\ndrwxr-xr-x  3 root root  4096 Dec  2 21:34 Disk60G/\n\n所有者和群组都是root的，需要改成当前用户 ohos，否则会有读写该磁盘的权限问题。\nsudo chown -R ohos:ohos ./Disk60Gsudo chmod -R 775 ./Disk60G\n\n  这样就可以在 Disk60G 目录（磁盘）中下载OH代码进行使用了。\n"},{"title":"招新","url":"/2025/09/25/%E6%8B%9B%E6%96%B0/","content":"招新"}]