[{"title":"windows命令行常用指令","url":"/2025/08/16/windows%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","content":""},{"title":"测试文章","url":"/2025/08/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","content":"abcdefg\n"},{"title":"GitHub Pages + Hexo搭建个人博客网站","url":"/2025/08/14/GitHub%20Pages%20+%20Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/","content":"一 ，准备Github账号\n安装NodeJS\ngit可以选择安装。\n二、创建仓库在GitHub上创建一个新的代码仓库用于保存我们的网页。\n点击Your repositories，进入仓库页面。\n点击New按钮，进入仓库创建页面。\n填写仓库名，格式必须为&lt;用户名&gt;.github.io，然后点击Create repository。\n测试网页点击creating a new file创建一个新文件，作为我们网站的主页。\n新文件的名字必须为index.html，内容先随便写一个简单的，内容示例如下，填写之后点击Commit new file提交。\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;cccccc&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;个人主页&lt;/h1&gt;    &lt;h1&gt;Hello ~&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\nGitHub Pages中找到我们主页的地址为 https://xxxxxx.github.io/\n浏览器中访问，展示成功。\n三、安装Hexo我们采用Hexo来创建我们的博客网站，Hexo 是一个基于NodeJS的静态博客网站生成器，使用Hexo不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。点击进入 官网。\n安装 Hexo\nnpm install -g hexo-cli\n查看版本\nhexo -v\n创建一个项目 hexo-blog 并初始化\nhexo init hexo-blog\n转到hexo项目的文件夹\ncd hexo-blog\n下载\nnpm install\n\n\n本地启动\nhexo ghexo server\n浏览器访问 http://localhost:4000，页面默认主图风格如下\n六、 上传到github安装hexo-deployer-git\nnpm install hexo-deployer-git --save\n\n在根目录下的 _config.yml末尾添加，GitHub 相关信息\ndeploy:type: gitrepo: https://github.com/you_name/you_name.github.io.gitbranch: maintoken: ghp_3xxxxaPHexxxxxyMerofcFd9pblU2xxxSbsY\n\n其中 token 为 GitHub 的 Personal access tokens，获取方式如下图\nhexo g -d\n\n\n\n\n\n\n\n\n四、更换主题&amp;美化这段可以后面再搞,建议按照顺序，不要跳过。\n1. 使用 NexT 主题安装主题\ncd hexo-bloggit clone https://github.com/iissnan/hexo-theme-next themes/next\n打开 _config.yml 文件，该文件为站点配置文件将主题修改为 next（在大约101行）\ntheme: next\n\n重新启动，查看新主题\n复制主题配置文件。以next主题为例打开node_modules\\hexo-theme-next目录\n\n复制  _config.yml文件为副本。重命名为 _config.next.yml剪切到根目录。\n2.个性化博客设置1. 浏览器tab页名称修改根目录下 _config.yml 中的 title 字段。\n2.博客标题和图标3.添加评论区。使用LeanCloud等需要实名认证之类的操作，所以建议使用Github的app giscus。\n准备工作你的仓库必须是公开的 (public)，否则访客将无法查看 discussion        你的 GitHub 已安装 giscus app ，否则访客将无法评论和回应        在你的仓库中启用 Discussions 功能\n\n设置步骤\n注册 Giscus 并获取配置：\n访问 Giscus 的官方网站。\n\n\n\n\n根据你的需求配置 Giscus，然后复制生成的配置代码。\n      这是我的配置代码\n\n\n&lt;script src=&quot;https://giscus.app/client.js&quot;        data-repo=&quot;cwx2006/cwx2006.github.io&quot;        data-repo-id=&quot;R_kgxxPxxx0A&quot;        data-category=&quot;Q&amp;A&quot;        data-category-id=&quot;DIC_xxxxPXXXxM5xxxxX&quot;        data-mapping=&quot;title&quot;        data-strict=&quot;0&quot;        data-reactions-enabled=&quot;1&quot;        data-emit-metadata=&quot;0&quot;        data-input-position=&quot;top&quot;        data-theme=&quot;preferred_color_scheme&quot;        data-lang=&quot;zh-CN&quot;        data-loading=&quot;lazy&quot;        crossorigin=&quot;anonymous&quot;        async&gt;&lt;/script&gt;\n\n在你的 Hexo 博客目录中执行以下命令，安装 hexo-next-giscus 插件\nnpm install hexo-next-giscus --save\n\n编辑 Next 主题的配置文件：\n\n打开 Hexo 博客的根目录。\n编辑 _config.next.yml 文件（这是 Next 主题的配置文件）。\n\n\n添加 Giscus 配置：\n\n搜索 comments 。\n粘贴 Giscus 配置（在其他第三方评论插件的配置中），如下所示：\n\n\n\n# _config.next.ymlcomments:  giscus:  enable: true  repo: cwx2006/cwx2006.github.io   #需要修改  repo_id: R_kgxxPxxx0A             #修改  category: Announcements  category_id: DIC_kxDxPXXkxM5xxxxX #修改  mapping: title  strict: 0  reactions_enabled: 1  emit_metadata: 0  input_position: top  theme: preferred_color_scheme  lang: zh-CN  loading: lazy \n\n确保将 需要修改的内容替换为你实际的信息，可以使用vscode对照着看,有自动补全。\n5. 更新 Hexo 博客：   保存配置文件后，在博客根目录下执行以下命令来生成静态文件并部署：\n   hexo cleanhexo ghexo d\n\n参考：\nHexo 评论系统（Giscus）\n4.修改图片建议使用Typoar来写文章。在使用的过程中会遇到添加图片的问题\n建议图片放在文章资源文件夹中，使用相对路径引用图片。每次写新文章的时候，使用\nhexo new page_name\n创建资源文件夹。\n然后在page_name文件夹中放入图片，在page_name.md中就能直接使用相对路径比如![](image.jpg)引用图片资源了。只要 文章资源文件夹 和 文章.md 在同一目录下,Hexo生成的网页可以正常加载图像。\n但是这样的问题就是Typoar中无法预览图片。。。\n\n解决办法：安装插件——突然失效了\n使用github搭建图床。\n五、创建文章如下修改 Hexo 博客目录中的 _config.yml，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。\n执行如下命令创建一篇新文章，名为《测试文章》\nhexo new post 测试文章\n执行完成后在source_posts目录下生成了一个md文件和一个同名的资源目录(用于存放图片\n在资源目录测试文章中放一张图片 test.png\n七 、使用自己的域名解析如果有自己的域名的话，可以尝试一下\n建议使用example.com或者www.example.com\n1.DNS 配置中添加github.io 的记录选择CNAME\n填入WWW,CNAME填入xxx.github,io\n点击确认，等待DNS生效\n2.github设置在 github  仓库处进入设置 ”settings“。\n将页面拖至底部，找到 Github Pages 设置栏，将 Custom domain 设置为自己的域名 example.com ，设置成功\n\n出现绿色的提示已发布成功。\n可以ping一下自己的网站\n\n（github支持自定义域名的 HTTPS 请求，如需配置，可勾选下方的 Enforce HTTPS）会在根目录下生成一个 CNAME 文件，其内容为自己设置的域名，如下\n为了防止hexo d上传的时候都会覆盖掉github上的CNAME，导致域名失效。需要在&#x2F;source目录放置CNAME文件（可以下载或者先创建一个txt文件填入你的域名）\n最后，删掉txt后缀。因为是CNAME,不是CNAME.txt。\n"},{"title":"Windows系统自动粘贴文件","url":"/2025/08/15/Windows%E8%87%AA%E5%8A%A8%E7%B2%98%E8%B4%B4%E6%96%87%E4%BB%B6/","content":"在windows系统中，剪贴板中保存的是图片数据（类似图片的地址），而不是文件。\n使用这个小软件：\nPaste As File 把剪贴板的内容直接粘贴为文件\n下载，解压并运行，会在鼠标右键窗口栏处添加一个功能\n文档：\nHome &#x2F;PasteEx Wiki\nwin快捷操作PrtSc(在键盘右上角)&#x3D;win+shift+s &#x3D;选择区域截屏。win+PrtSc&#x3D;全屏截屏。\n"},{"title":"Hello World","url":"/2025/08/13/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"github搭建图床","url":"/2025/08/17/github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/","content":"建议：在测试添加图片的时候，开启加速器（比如 瓦特工具箱）\n配置GitHub和之前创建网站的仓库一样。新建仓库，，名字叫picture，权限为public。点开我们的头像，并选择”Settings“，然后点击左下角的”Developer settings“选项\n\n选择classic,创建token,有效期选择90天，GitHub官方强烈不推荐使用永久期限的token下方的勾选项选中repo开头的\n\n保存这个token的序号GitHub上的配置操作已完成。\n配置PicGo接下来，我们需要配置PicGo。PicGo是一个工具，从而将我们的图片上传到GitHub中。\n进入PicGo的官方网站PicGo is Here | PicGo，如下图所示。\n\n然后选择一个下载地址进行下载。\n这是GitHub的下载地址：Releases · Molunerfinn&#x2F;PicGo\n根据自己的系统选择安装包\n\n安装PicGo并打开\n我在”图床设置“中找到”GitHub“，并配置各项信息。\n\n仓库名部分修改为自己的仓库名称。\n分支名使用main。因为GitHub仓库的默认分支名称为main\n填入仓库的token。\n配置Typora如果需要在Typora软件中，复制剪切板的图片，或者上传本地的图片后，自动将图片上传至前面配置好的图床中，就需要配置一下Typora软件。\n在”文件“中选择”偏好设置…“，随后选择”图像“，并按照如下图所示的配置方式来加以设置。\n\n随后，选择上图中的”验证图片上传选项“，如果出现如下图所示的窗口，则表明我们已经成功配置完毕。\n截图&#x2F;复制图片后粘贴时要退出源码模式。有时候会出现图片加载不出来的情况。可以重新启动Typora看看。\n"}]