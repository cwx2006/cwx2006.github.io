[{"title":"windows命令行常用指令","url":"/2025/08/16/windows%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","content":""},{"title":"测试文章","url":"/2025/08/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","content":"一个测试文章\n"},{"title":"GitHub Pages + Hexo搭建个人博客网站","url":"/2025/08/14/GitHub%20Pages%20+%20Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/","content":"一 ，准备Github账号安装NodeJSgit可以选择安装。\n二、创建仓库在GitHub上创建一个新的代码仓库用于保存我们的网页。打开GitHub主页，点击New按钮，进入仓库创建页面。填写仓库名，格式必须为&lt;用户名&gt;.github.io，权限为Public。然后点击Create repository。\n测试网页点击creating a new file创建一个新文件，暂时作为我们网站的主页。\n\n新文件的名字必须为index.html，内容先随便写一个简单的，内容示例如下，填写之后点击Commit new file提交。\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;我的博客&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;个人主页&lt;/h1&gt;    &lt;h1&gt;Hello ~&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\nGitHub Pages中找到我们主页的地址为 https://xxxxxx.github.io/浏览器中访问，成功。\n三、安装Hexo我们采用Hexo来创建我们的博客网站，Hexo 是一个基于NodeJS的静态博客网站生成器，使用Hexo不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。点击进入 官网。\n安装 Hexo\nnpm install -g hexo-cli\n查看版本\nhexo -v\n创建一个项目 hexo-blog 并初始化\nhexo init hexo-blog\n转到hexo项目的文件夹\ncd hexo-blog\n下载\nnpm install\n本地启动\nhexo ghexo server\n浏览器访问 http://localhost:4000，页面默认主图风格如下\n六、创建文章如下修改 Hexo 博客目录中的 _config.yml，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。执行如下命令创建一篇新文章，名为《测试文章》\npost_asset_folder: true\n执行如下命令创建一篇新文章，名为《测试文章》\nhexo new post 测试文章\n\n执行完成后在source_posts目录下生成了一个md文件和一个同名的资源目录(用于存放图片\n四、 上传到github安装hexo-deployer-git\nnpm install hexo-deployer-git --save\n\n在根目录下的 _config.yml末尾添加，GitHub 相关信息\ndeploy:type: gitrepo: https://github.com/you_name/you_name.github.io.gitbranch: maintoken: ghp_3xxxxaPHexxxxxyMerofcFd9pblU2xxxSbsY\n\n其中 token 为 GitHub 的 Personal access tokens，获取方式可以参考这个链接：\n使用github搭建图床。\nhexo g -d\n\n\n五、更换主题&amp;美化这段可以后面再搞,建议按照顺序。\n1. 使用 NexT 主题安装主题\ncd hexo-bloggit clone https://github.com/iissnan/hexo-theme-next themes/next\n打开 _config.yml 文件，该文件为站点配置文件将主题修改为 next（在大约101行）\ntheme: next\n\n重新启动，查看新主题\n复制主题配置文件。以next主题为例打开node_modules\\hexo-theme-next目录\n\n复制  _config.yml文件为副本。重命名为 _config.next.yml剪切到根目录。\n2.个性化博客设置浏览器tab页名称修改根目录下 _config.yml 中的 title 字段。\n博客标题和图标主题配置文件 _config.nexy.yml中搜索favicon字段：可以修改博客的图标——.\\public\\images文件夹下。需要裁剪3232和1616的图片文件。\n添加社交网站主题配置文件 _config.nexy.yml中搜索social:\n虽然大部分是国外常用的社交软件，但是可以添加B站：\nBilibili: https://space.bilibili.com/1691508201|| fab fa-bilibili\n比如这样：\n添加浏览量在根目录下 _config.nexy.yml文件搜索busuanzi\n  enable改为: true\n\n之后会显示这个：\n添加评论区。使用LeanCloud等需要实名认证之类的操作，所以建议使用Github的app giscus。\n准备工作你的仓库必须是公开的 (public)，否则访客将无法查看 discussion        你的 GitHub 已安装 giscus app ，否则访客将无法评论和回应        在你的仓库中启用 Discussions 功能\n\n设置步骤\n注册 Giscus 并获取配置：\n访问 Giscus 的官方网站。\n\n\n\n\n\n\n根据你的需求配置 Giscus，然后复制生成的配置代码。\n\n     这是我的配置代码\n&lt;script src=&quot;https://giscus.app/client.js&quot;        data-repo=&quot;cwx2006/cwx2006.github.io&quot;        data-repo-id=&quot;R_kgxxPxxx0A&quot;        data-category=&quot;Q&amp;A&quot;        data-category-id=&quot;DIC_xxxxPXXXxM5xxxxX&quot;        data-mapping=&quot;title&quot;        data-strict=&quot;0&quot;        data-reactions-enabled=&quot;1&quot;        data-emit-metadata=&quot;0&quot;        data-input-position=&quot;top&quot;        data-theme=&quot;preferred_color_scheme&quot;        data-lang=&quot;zh-CN&quot;        data-loading=&quot;lazy&quot;        crossorigin=&quot;anonymous&quot;        async&gt;&lt;/script&gt;\n\n在你的 Hexo 博客目录中执行以下命令，安装 hexo-next-giscus 插件\nnpm install hexo-next-giscus --save\n\n编辑 Next 主题的配置文件：\n\n打开 Hexo 博客的根目录。\n编辑 _config.next.yml 文件（这是 Next 主题的配置文件）。\n\n\n添加 Giscus 配置：\n\n搜索 comments 。\n粘贴 Giscus 配置（在其他第三方评论插件的配置中），如下所示：\n\n\n\n# _config.next.ymlcomments:  giscus:  enable: true  repo: cwx2006/cwx2006.github.io   #需要修改  repo_id: R_kgxxPxxx0A             #修改  category: Announcements  category_id: DIC_kxDxPXXkxM5xxxxX #修改  mapping: title  strict: 0  reactions_enabled: 1  emit_metadata: 0  input_position: top  theme: preferred_color_scheme  lang: zh-CN  loading: lazy \n\n确保将 需要修改的内容替换为你实际的信息，可以使用vscode对照着看,有自动补全。\n5. 更新 Hexo 博客：   保存配置文件后，在博客根目录下执行以下命令来生成静态文件并部署：\n   hexo cleanhexo ghexo d\n\n参考：\nHexo 评论系统（Giscus）\n4.修改图片建议使用Typoar来写文章。在使用的过程中会遇到添加图片的问题\n建议图片放在文章资源文件夹中，使用相对路径引用图片。每次写新文章的时候，使用\nhexo new post 新文章标题\n创建资源文件夹。\n然后在page_name文件夹中放入图片，在page_name.md中就能直接使用相对路径比如![](image.jpg)引用图片资源了。只要 文章资源文件夹 和 文章.md 在同一目录下,Hexo生成的网页可以正常加载图像。\n但是这样的问题就是Typoar中无法预览图片。。。\n解决办法：安装插件——突然失效了\n使用github搭建图床。\n七、使用自己的域名解析如果有自己的域名的话，可以尝试一下\n建议使用example.com或者www.example.com\n1.DNS 配置中添加github.io 的记录选择CNAME\n填入WWW,CNAME填入xxx.github,io\n点击确认，等待DNS生效\n2.github设置在 github  仓库处进入设置 ”settings“。\n将页面拖至底部，找到 Github Pages 设置栏，将 Custom domain 设置为自己的域名 example.com ，设置成功\n\n出现绿色的提示已发布成功。\n可以ping一下自己的网站\n\n（github支持自定义域名的 HTTPS 请求，如需配置，可勾选下方的 Enforce HTTPS）会在根目录下生成一个 CNAME 文件，其内容为自己设置的域名，如下\n为了防止hexo d上传的时候都会覆盖掉github上的CNAME，导致域名失效。需要在&#x2F;source目录放置CNAME文件（可以下载或者先创建一个txt文件填入你的域名）\n最后，删掉txt后缀。因为是CNAME,不是CNAME.txt。\n八、参考资料基本撰写和格式语法 - GitHub 文档\ngethexon&#x2F;hexon: Let’s hexo online.\n不蒜子 - 极简网页计数器\n关于自定义域名和 GitHub 页面 - GitHub 文档\nTypora 的 Markdown 语法 - Typora Support\n这个看起来也不错：\n史上最全Typora教程—-程序员必学软件之一-CSDN博客\n"},{"title":"Windows系统自动粘贴文件","url":"/2025/08/15/Windows%E8%87%AA%E5%8A%A8%E7%B2%98%E8%B4%B4%E6%96%87%E4%BB%B6/","content":"在windows系统中，剪贴板中保存的是图片数据（类似图片的地址），而不是文件。\n使用这个小软件：\nPaste As File 把剪贴板的内容直接粘贴为文件\n下载，解压并运行，会在鼠标右键窗口栏处添加一个功能\n文档：\nHome &#x2F;PasteEx Wiki\nwin快捷操作PrtSc(在键盘右上角)&#x3D;win+shift+s &#x3D;选择区域截屏。win+PrtSc&#x3D;全屏截屏。\n"},{"title":"Hello World","url":"/2025/08/13/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"github搭建图床","url":"/2025/08/17/github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/","content":"建议：在测试添加图片的时候，开启加速器（比如 瓦特工具箱）\n配置GitHub和之前创建网站的仓库一样。新建仓库，，名字叫picture，权限为public。点开我们的头像，并选择”Settings“，然后点击左下角的”Developer settings“选项\n\n选择classic,创建token,有效期选择90天，GitHub官方强烈不推荐使用永久期限的token下方的勾选项选中repo开头的\n\n保存这个token的序号GitHub上的配置操作已完成。\n配置PicGo接下来，我们需要配置PicGo。PicGo是一个工具，从而将我们的图片上传到GitHub中。\n进入PicGo的官方网站PicGo is Here | PicGo，如下图所示。\n\n然后选择一个下载地址进行下载。\n这是GitHub的下载地址：Releases · Molunerfinn&#x2F;PicGo\n根据自己的系统选择安装包\n\n安装PicGo并打开\n我在”图床设置“中找到”GitHub“，并配置各项信息。\n\n仓库名部分修改为自己的仓库名称。\n分支名使用main。因为GitHub仓库的默认分支名称为main\n填入仓库的token。\n配置Typora如果需要在Typora软件中，复制剪切板的图片，或者上传本地的图片后，自动将图片上传至前面配置好的图床中，就需要配置一下Typora软件。\n在”文件“中选择”偏好设置…“，随后选择”图像“，并按照如下图所示的配置方式来加以设置。\n\n随后，选择上图中的”验证图片上传选项“，如果出现如下图所示的窗口，则表明我们已经成功配置完毕。\n截图&#x2F;复制图片后粘贴时要退出源码模式。有时候会出现图片加载不出来的情况。可以重新启动Typora看看。\n"},{"title":"Hyper-v命令行","url":"/2025/08/19/Hyper-v%E5%91%BD%E4%BB%A4%E8%A1%8C/","content":"   Hyper-v使用命令行是为了方便使用脚本管理。。。\n查看本地帮助\n选择 Windows 开始按钮，然后右键选择，点击 PowerShell。\n\n可以运行以下命令以显示 Hyper-V PowerShell 模块提供的 PowerShell 命令的可搜索列表。\n\n\nGet-Command -Module hyper-v | Out-GridView\n\n\n若要了解有关特定 PowerShell 命令的详细信息，请使用 Get-Help。 例如，运行以下命令将返回有关 Get-VM Hyper-V 命令的信息。\n需要加载一会\n\n查看现有的虚拟机Get-VM使用命令返回虚拟机列表\n\nPowerShell 中运行以下命令：\n\nGet-VM\n\n\n若要查看开机的虚拟机，可以使用命令添加 Where-Object 筛选器。\nGet-VM | where &#123;$_.State -eq &#x27;Running&#x27;&#125;\n\n查看关及状态的所有虚拟机\nGet-VM | where &#123;$_.State -eq &#x27;Off&#x27;&#125;\n\n启动和关闭虚拟机\n若要启动一台虚拟机，请使用虚拟机的名称运行以下命令：\nStart-VM -Name 虚拟机名字\n\n若要启动当前关闭的所有虚拟机，请获取这些计算机的列表，并将列表通过管道传递给 Start-VM 命令：\nGet-VM | where &#123;$_.State -eq &#x27;Off&#x27;&#125; | Start-VM\n\n若需要启动以debia 开头的虚拟机：\nStart-VM -Name debia*   \n\n\n关闭以debia 开头的虚拟机：\nStop-VM debia* \n\n强制关机\n Stop-VM -Name &#x27;虚拟机名&#x27; –Force\n\n若要关闭所有正在运行的虚拟机，请运行以下命令：\n\n\nGet-VM | where &#123;$_.State -eq &#x27;Running&#x27;&#125; | Stop-VM\n\n保存虚拟机\n\nSave-VM -Name &#x27;debian&#x27;\n\n\n\n保存以debia*开头的虚拟机Get-VM -Name debia* | Save-VM\n\n创建虚拟机检查点（快照）若要使用 PowerShell 创建检查点，使用命令选择虚拟机 Get-VM ，并将其传递给 Checkpoint-VM 命令。 最后，使用 -SnapshotName 为检查点命名。 完整的命令如下所示：\n创建虚拟机debian的名为Update1的检查点。\nCheckpoint-VM -Name &#x27;debian&#x27; -SnapshotName Update1\n查看检查点：\nGet-VMSnapshot -VMName &#x27;debian&#x27;\n如果要删除名称以“ Update”开头的所有快照，则应运行以下命令：\nGet-VM &#x27;debian&#x27; | Remove-VMSnapshot -Name Update*\n\n创建新的虚拟机以下示例演示如何在 PowerShell 集成脚本环境（ISE）中创建新的虚拟机。 这是一个简单的示例，可以将其扩展为包括其他 PowerShell 功能和更高级的 VM 部署。\n\n若要打开 PowerShell ISE 单击“开始”，请键入 PowerShell ISE。\n\n运行以下代码以创建虚拟机。 有关命令的详细信息，请参阅 New-VM 文档。\n$VMName = &quot;VMNAME&quot;   $VM = @&#123;    Name = $VMName    MemoryStartupBytes = 2147483648    Generation = 2    NewVHDPath = &quot;C:\\Virtual Machines\\$VMName\\$VMName.vhdx&quot;    NewVHDSizeBytes = 53687091200    BootDevice = &quot;VHD&quot;    Path = &quot;C:\\Virtual Machines\\$VMName&quot;    SwitchName = (Get-VMSwitch).Name&#125;   New-VM @VM\n\n查看虚拟机状态首先需要启用资源计量。\nEnable-VMResourceMetering -VMName &#x27;debian&#x27;\n查看名为debian的虚拟机的CPU使用率，RAM使用率，磁盘容量和网络流量\nMeasure-VM -VMName &#x27;debian&#x27;\n\n下方的还没有测试 \n\n虚拟机配置管理\n修改虚拟机配置\n# 修改虚拟机内存（动态内存）Set-VMMemory -VMName &quot;VMName&quot; -DynamicMemoryEnabled $true -MinimumBytes 512MB -MaximumBytes 4GB -StartupBytes 2GB# 修改虚拟机处理器数量Set-VMProcessor -VMName &quot;VMName&quot; -Count 4# 修改虚拟机启动顺序（仅适用于第2代虚拟机）Set-VMFirmware -VMName &quot;VMName&quot; -BootOrder @(&quot;HardDiskDrive&quot;, &quot;NetworkAdapter&quot;)\n\n添加或移除硬件\n# 添加虚拟硬盘Add-VMHardDiskDrive -VMName &quot;VMName&quot; -Path &quot;D:\\VHDs\\disk2.vhdx&quot;# 添加网络适配器Add-VMNetworkAdapter -VMName &quot;VMName&quot; -SwitchName &quot;External Switch&quot;# 移除硬件（例如移除第2个硬盘）Remove-VMHardDiskDrive -VMName &quot;VMName&quot; -ControllerLocation 1\n\n\n\n\n\n# 查看所有虚拟交换机\nGet-VMSwitch\n\n# 创建外部虚拟交换机\nNew-VMSwitch -Name &quot;External Switch&quot; -NetAdapterName &quot;Ethernet&quot; -AllowManagementOS $true\n\n# 创建内部或专用交换机\nNew-VMSwitch -Name &quot;Internal Switch&quot; -SwitchType Internal\n\n# 删除虚拟交换机\nRemove-VMSwitch -Name &quot;Internal Switch&quot; -Force\n------### 虚拟硬盘管理1. **创建和管理虚拟硬盘**\n# 创建新的动态扩展虚拟硬盘\nNew-VHD -Path &quot;C:\\VHDs\\new_disk.vhdx&quot; -SizeBytes 50GB -Dynamic\n\n# 挂载虚拟硬盘到主机（便于修改内容）\nMount-VHD -Path &quot;C:\\VHDs\\disk.vhdx&quot;\n\n# 卸载虚拟硬盘\nDismount-VHD -Path &quot;C:\\VHDs\\disk.vhdx&quot;\n\n# 压缩虚拟硬盘（回收未使用空间）\nOptimize-VHD -Path &quot;C:\\VHDs\\disk.vhdx&quot; -Mode Full\n\n\n\n------### 高级监控与性能1. **实时监控**   powershell\n查看虚拟机CPU、内存、磁盘、网络实时使用情况（持续刷新）   Get-VM -Name “VMName” | Get-VMResourceMetering | Format-List\n启用资源计量（如未启用）   Enable-VMResourceMetering -VMName “VMName”   2. **导出性能数据**   powershell\n导出虚拟机性能数据到CSV   Measure-VM -Name “VMName” | Export-Csv -Path “C:\\perf.csv” -NoTypeInformation   ------### 导入和导出虚拟机1. **导出虚拟机**   powershell   Export-VM -Name “VMName” -Path “D:\\Exports&quot;   2. **导入虚拟机**   powershell   Import-VM -Path “D:\\Exports\\VMName\\Virtual Machines\\VMID.xml” -Copy -GenerateNewId   ------### 虚拟机复制（Replication）1. **配置复制**   powershell\n启用虚拟机复制   Enable-VMReplication -VMName “VMName” -ReplicaServerName “ReplicaHost” -ReplicaServerPort 80 -AuthenticationType Kerberos -CompressionEnabled $true   2. **启动复制**   powershell   Start-VMInitialReplication -VMName “VMName”   ------### 安全检查点（快照）管理1. **还原到检查点**   powershell   Restore-VMSnapshot -Name “SnapshotName” -VMName “VMName” -Confirm:$false   2. **重命名检查点**   powershell   Rename-VMSnapshot -VMName “VMName” -Name “OldName” -NewName “NewName”   ------### 其他实用命令1. **查看Hyper-V主机信息**   powershell   Get-VMHost   2. **查看虚拟机集成服务状态**   powershell   Get-VMIntegrationService -VMName “VMName”   3. **启用或禁用集成服务**   powershell   Enable-VMIntegrationService -VMName “VMName” -Name “Time Synchronization”   Disable-VMIntegrationService -VMName “VMName” -Name “Time Synchronization”\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考链接\n[微软官网文档](https://learn.microsoft.com/zh-cn/powershell/module/hyper-v/?view=windowsserver2019-ps) 可以左上角根据自己的系统调整\n\n"},{"title":"linux系统安装redis","url":"/2025/08/23/linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85redis/","content":"使用 apt来安装 Redis：$ sudo apt update$ sudo apt install redis-server  -y或apt install redis-server -y\n安装完成后，Redis 将自动启动。您可以通过运行以下命令来检查 Redis 的状态：\nsudo systemctl status redis-server\n要测试 Redis 是否正常工作，您可以运行以下命令：\nredis-cli ping\n如果 Redis 工作正常，它将返回 PONG。\nRedis 配置打开 Redis的配置文件\nsudo nano /etc/redis/redis.conf\n将 bind 127.0.0.1 ::1 改为 bind 0.0.0.0，可以外部访问\n修改密码：找到ctrl+b搜索requirepass：找到：requirepass foobared将注释符号去掉，将后面修改成自己的密码，如:requirepass 123456之后重新启动 redis\nredis 服务控制#启动 redis 服务： sudo systemctl start redis#关闭 redis 服务： sudo systemctl stop redis#重启 redis 服务：sudo service redis restart\n\nredis 客户端连接在命令行中输入如下命令来登陆进 redis 客户端\nredis-cli\n使用密码连接redis \n./redis-cli -h 127.0.0.1 -p 6379 -a Passw0rd\n\n退出redis使用QUIT或者EXIT命令\nQUIT\nEXIT\n"},{"title":"使用Nginx和Rsync搭建镜像站","url":"/2025/08/23/%E8%87%AA%E5%BB%BA%E9%95%9C%E5%83%8F%E7%AB%99/","content":"tunasync搭建类似清华源镜像tunasync不知道为什么安装不了。文档：tunasync&#x2F;docs&#x2F;zh_CN&#x2F;get_started.md at master · tuna&#x2F;tunasync下载解压(tar -xvzf archive.tar.gz)，不用编译，按照文档 mkdir 创建文件夹  ，touch 创建文件，可以使用redis。\n运行脚本\n./tunasync manager --config /home/uesr/tuna/tunasync_demo/manager.conf./tunasync worker --config /home/user/tuna//tunasync_demo/worker.conf\n\n这个脚本疑似需要3个ssh窗口\ntunasync&#x2F;docs&#x2F;zh_CN&#x2F;workers.conf at master · tuna&#x2F;tunasync\n可以在这里选择要同步的内容\n参考\n搭建开源镜像站 - fangpsh’s blog\n(6 封私信) 使用tunasync部署企业内部开源软件镜像站 - 知乎\n使用tunasync搭建自己的开源软件镜像仓库 - 点滴记忆\n基于nginx搭建镜像站这个教程基于deepseek\n怎么使用nginx和rsync搭建一个可用的镜像源站(类似清华源)。只有局域网使用，可以同步ubuntu的东西，用户界面可以超级简陋(甚至只有文件目录），可以使用sh脚本。\n\n\n\n环境要求\nUbuntu服务器（18.04或更高版本）\n充足的磁盘空间（建议至少500GB）\n局域网环境\n\n安装步骤1. 安装必要的软件包bash\nsudo apt updatesudo apt install -y nginx rsync cron\n\n2. 创建镜像存储目录bash\nsudo mkdir -p /var/www/mirror/ubuntusudo chown -R www-data:www-data /var/www/mirrorsudo chmod -R 755 /var/www/mirror\n\n3. 配置Nginx创建Nginx配置文件 \nsudo nano /etc/nginx/sites-available/mirror\n添加以下内容：\nserver &#123;    listen 80;    server_name _;    root /var/www/mirror;    index index.html;    # 启用自动目录列表    autoindex on;    autoindex_exact_size off;    autoindex_localtime on;    location / &#123;        try_files $uri $uri/ =404;    &#125;    # 限制访问速度（可选）    # limit_rate 10m;&#125;\n\n启用站点并重新加载Nginx：\nsudo ln -s /etc/nginx/sites-available/mirror /etc/nginx/sites-enabled/sudo nginx -tsudo systemctl reload nginx\n\n4. 创建同步脚本创建同步脚本\nsudo nano /usr/local/bin/sync-mirror.sh\n\n添加以下内容\n#!/bin/bash# 镜像源设置（可以使用清华源或其他国内源）MIRROR_URL=&quot;rsync://mirrors.tuna.tsinghua.edu.cn/ubuntu/&quot;# 本地存储路径LOCAL_PATH=&quot;/var/www/mirror/ubuntu&quot;# 日志文件LOG_FILE=&quot;/var/log/ubuntu-sync.log&quot;# 同步选项RSYNC_OPTIONS=&quot;-avzH --delete --partial --progress --bwlimit=10000&quot;# 开始同步echo &quot;开始同步: $(date)&quot; &gt;&gt; $LOG_FILErsync $RSYNC_OPTIONS $MIRROR_URL $LOCAL_PATH &gt;&gt; $LOG_FILE 2&gt;&amp;1echo &quot;同步完成: $(date)&quot; &gt;&gt; $LOG_FILE# 更新权限chown -R www-data:www-data $LOCAL_PATHchmod -R 755 $LOCAL_PATH\n\n给脚本执行权限：\nsudo chmod +x /usr/local/bin/sync-ubuntu-mirror.sh\n\n5. 设置定时同步编辑cron任务：\nsudo crontab -e\n\n添加以下内容（每天凌晨3点同步）：\n0 3 * * * /usr/local/bin/sync-ubuntu-mirror.sh\n\n6. 首次同步手动执行首次同步（这将需要很长时间，取决于网络速度和源站负载）：\nbash\nsudo /usr/local/bin/sync-ubuntu-mirror.sh\n\n7. 创建简单用户界面(可选)可以创建基本HTML页面 /var/www/mirror/index.html：\n&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;局域网Ubuntu镜像站&lt;/title&gt;    &lt;style&gt;        body &#123; font-family: Arial, sans-serif; margin: 40px; &#125;        h1 &#123; color: #333; &#125;        a &#123; color: #007bff; text-decoration: none; &#125;        a:hover &#123; text-decoration: underline; &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;局域网Ubuntu镜像站&lt;/h1&gt;    &lt;p&gt;本镜像站最后更新时间: &lt;span id=&quot;last-update&quot;&gt;未知&lt;/span&gt;&lt;/p&gt;    &lt;p&gt;可用资源:&lt;/p&gt;    &lt;ul&gt;        &lt;li&gt;&lt;a href=&quot;/ubuntu&quot;&gt;Ubuntu 主仓库&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;        &lt;script&gt;        // 尝试从日志中获取最后更新日期        fetch(&#x27;/ubuntu-mirror-sync.log&#x27;)            .then(response =&gt; response.text())            .then(data =&gt; &#123;                const lines = data.split(&#x27;\\n&#x27;);                const lastUpdate = lines.filter(line =&gt; line.includes(&#x27;同步完成&#x27;));                if (lastUpdate.length &gt; 0) &#123;                    document.getElementById(&#x27;last-update&#x27;).textContent = lastUpdate[lastUpdate.length - 1];                &#125;            &#125;)            .catch(err =&gt; &#123;                console.log(&#x27;无法获取更新日志&#x27;);            &#125;);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n8. 客户端配置局域网内的其他Ubuntu机器可以使用此镜像站，编辑sources.list：\nsudo nano /etc/apt/sources.list\n\n替换为：\ndeb http://[你的服务器IP]/ubuntu/ focal main restricted universe multiversedeb http://[你的服务器IP]/ubuntu/ focal-updates main restricted universe multiversedeb http://[你的服务器IP]/ubuntu/ focal-backports main restricted universe multiversedeb http://[你的服务器IP]/ubuntu/ focal-security main restricted universe multiverse\n\n然后运行更新：\nsudo apt update\n\n管理维护\n监控同步状态：\ntail -f /var/log/ubuntu-mirror-sync.log\n\n手动触发同步：\nsudo /usr/local/bin/sync-ubuntu-mirror.sh\n\n检查磁盘使用情况：\ndf -h /var/www/mirrordu -sh /var/www/mirror/ubuntu\n\n同步脚本修改前提：找到同步源中国科学技术大学USTC Open Source Software Mirror中科大raync同步方法https://mirrors.ustc.edu.cn/help/rsync-guide.html\n\n\n查看一个镜像站可同步仓库列表\nrsync rsync.mirrors.ustc.edu.cn:: #有的高校镜像源的rsync协议的url不带rsync\n或者\nrsync mirrors.nju.edu.cn:: #例如南京大学\n查看资源目录结构(以ubuntu为例)\nrsync rsync://rsync.mirrors.ustc.edu.cn/ubuntu/\n修改同步脚本：例如，修改为同步南京大学镜像站的7-zip资源\n#!/bin/bash# 南京大学7-Zip镜像源设置MIRROR_URL=&quot;rsync://mirrors.nju.edu.cn/7-zip/&quot;LOCAL_PATH=&quot;/var/www/mirror/7-zip&quot;LOG_FILE=&quot;/var/log/7zip-mirror.log&quot;#镜像URL：改为南京大学7-Zip的rsync地址 rsync://mirrors.nju.edu.cn/7-zip/#本地路径：调整为 /var/www/mirror/7-zip 以明确存储内容#日志文件：更名为 /var/log/7zip-mirror.log# 同步选项（保留删除选项以确保镜像一致性）RSYNC_OPTIONS=&quot;-av --delete --bwlimit=10000&quot;# 创建本地目录（如果不存在）mkdir -p $LOCAL_PATH# 开始同步echo &quot;开始同步7-Zip镜像: $(date)&quot; &gt;&gt; $LOG_FILErsync $RSYNC_OPTIONS $MIRROR_URL $LOCAL_PATH &gt;&gt; $LOG_FILE 2&gt;&amp;1# 检查同步结果并记录if [ $? -eq 0 ]; then    echo &quot;同步成功完成: $(date)&quot; &gt;&gt; $LOG_FILE    # 更新时间戳    echo &quot;最后同步时间: $(date)&quot; &gt; $LOCAL_PATH/LAST_SYNC.txtelse    echo &quot;同步失败，退出代码: $? - $(date)&quot; &gt;&gt; $LOG_FILE    exit 1fi# 添加镜像站信息文件cat &gt; $LOCAL_PATH/MIRROR_INFO.txt &lt;&lt; EOF==================================================                Nanjing University                  www.nju.edu.cn                Open Source Mirror            http://mirror.nju.edu.cn            https://mirror.nju.edu.cn            rsync://mirror.nju.edu.cn--------------------------------------------------7-Zip 镜像同步时间: $(date)镜像路径: $LOCAL_PATH==================================================EOFecho &quot;同步完成，详细信息请查看: $LOG_FILE&quot;\n\n改进说明：\n增强了日志记录：添加了更详细的分隔符和同步信息\n添加了镜像信息文件：在本地镜像目录创建 MIRROR_INFO.txt 文件，包含镜像站的基本信息\n改进了错误处理：更详细地记录同步结果和可能的错误\n添加了完成提示：脚本执行完成后会在终端显示简要信息\n\n解决Nginx显示默认欢迎页面问题例如：\nWelcome to nginx!If you see this page, the nginx web server is successfully installed and working. Further configuration is required.For online documentation and support please refer to nginx.org.Commercial support is available at nginx.com.Thank you for using nginx.\n\n看到的Nginx欢迎页面表明仍在运行默认站点。\n1. 禁用默认站点# 使用以下命令禁用默认站点sudo unlink /etc/nginx/sites-enabled/default\n\n\n\n2. 确认您的镜像站点配置已启用# 检查您的镜像站点配置是否已链接到sites-enabled目录ls -l /etc/nginx/sites-enabled/# 如果不存在链接，创建它sudo ln -s /etc/nginx/sites-available/mirror /etc/nginx/sites-enabled/\n\n3. 检查Nginx配置语法sudo nginx -t\n\n如果配置正确，您应该看到：\nnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful\n\n4. 重新加载Nginx配置sudo systemctl reload nginx\n\n5. 验证镜像站点是否正常工作访问您的服务器IP地址，现在应该显示镜像目录列表而不是欢迎页面。\n下方未试过了\n\n如果问题仍然存在检查Nginx的主配置文件，确保它包含了sites-enabled目录：\nbash\nsudo nano /etc/nginx/nginx.conf\n\n确保有以下内容（通常在http块中）：\ntext\nhttp &#123;    ...    include /etc/nginx/sites-enabled/*;    ...&#125;\n\n检查防火墙设置确保防火墙允许HTTP流量：\nbash\n# 如果使用ufwsudo ufw allow &#x27;Nginx HTTP&#x27;sudo ufw status"}]